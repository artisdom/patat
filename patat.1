.\" Automatically generated by Pandoc 1.17.2
.\"
.TH "patat manual" "1" "October 30, 2016" "patat v0.3.2.0" ""
.hy
.SH NAME
.PP
patat \- Presentations Atop The ANSI Terminal
.SH SYNOPSIS
.PP
\f[C]patat\f[] [\f[I]options\f[]] file
.SH DESCRIPTION
.PP
\f[C]patat\f[] is a small tool that allows you to show presentations
using only an ANSI terminal.
It does not require \f[C]ncurses\f[].
.PP
Features:
.IP \[bu] 2
Leverages the great Pandoc (http://pandoc.org/) library to support many
input formats including [Literate Haskell].
.IP \[bu] 2
Supports smart slide splitting (#input-format).
.IP \[bu] 2
There is a live reload (#running) mode.
.IP \[bu] 2
Theming (#theming) support.
.IP \[bu] 2
Optionally re\-wrapping (#configuration) text to terminal width with
proper indentation.
.IP \[bu] 2
Syntax highlighting for nearly one hundred languages generated from
Kate (https://kate-editor.org/) syntax files.
.IP \[bu] 2
Written in Haskell (http://haskell.org/).
.PP
[IMAGE: screenshot (extra/screenshot.png?raw=true)]
.SS Controls
.IP \[bu] 2
\f[B]Next slide\f[]: \f[C]space\f[], \f[C]enter\f[], \f[C]l\f[],
\f[C]→\f[]
.IP \[bu] 2
\f[B]Previous slide\f[]: \f[C]backspace\f[], \f[C]h\f[], \f[C]←\f[]
.IP \[bu] 2
\f[B]Go forward 10 slides\f[]: \f[C]j\f[], \f[C]↓\f[]
.IP \[bu] 2
\f[B]Go backward 10 slides\f[]: \f[C]k\f[], \f[C]↑\f[]
.IP \[bu] 2
\f[B]First slide\f[]: \f[C]0\f[]
.IP \[bu] 2
\f[B]Last slide\f[]: \f[C]G\f[]
.IP \[bu] 2
\f[B]Reload file\f[]: \f[C]r\f[]
.IP \[bu] 2
\f[B]Quit\f[]: \f[C]q\f[]
.PP
The \f[C]r\f[] key is very useful since it allows you to preview your
slides while you are writing them.
You can also use this to fix artifacts when the terminal is resized.
.SS Input format
.PP
The input format can be anything that Pandoc supports.
Plain markdown is usually the most simple solution:
.IP
.nf
\f[C]
\-\-\-
title:\ This\ is\ my\ presentation
author:\ Jane\ Doe
\&...

#\ This\ is\ a\ slide

Slide\ contents.\ \ Yay.

\-\-\-

#\ Important\ title

Things\ I\ like:

\-\ Markdown
\-\ Haskell
\-\ Pandoc
\f[]
.fi
.PP
Horizontal rulers (\f[C]\-\-\-\f[]) are used to split slides.
.PP
However, if you prefer not use these since they are a bit intrusive in
the markdown, you can also start every slide with an \f[C]h1\f[] header.
In that case, the file should not contain a single horizontal ruler.
.PP
This means the following document is equivalent:
.IP
.nf
\f[C]
\-\-\-
title:\ This\ is\ my\ presentation
author:\ Jane\ Doe
\&...

#\ This\ is\ a\ slide

Slide\ contents.\ \ Yay.

#\ Important\ title

Things\ I\ like:

\-\ Markdown
\-\ Haskell
\-\ Pandoc
\f[]
.fi
.SS Configuration
.PP
\f[C]patat\f[] is fairly configurable.
The configuration is done using YAML (http://yaml.org/).
There are two places where you can put your configuration:
.IP "1." 3
In the presentation file itself, using the Pandoc metadata
header (http://pandoc.org/MANUAL.html#extension-yaml_metadata_block).
.IP "2." 3
In \f[C]$HOME/.patat.yaml\f[]
.PP
For example, we can turn on line wrapping by using the following file:
.IP
.nf
\f[C]
\-\-\-
title:\ Presentation\ with\ wrapping
author:\ John\ Doe
patat:
\ \ \ \ wrap:\ true
\&...

This\ is\ a\ split
line\ which\ should
be\ re\-wrapped.
\f[]
.fi
.PP
Or we can use a normal presentation and have the following
\f[C]$HOME/.patat.yaml\f[]:
.IP
.nf
\f[C]
wrap:\ true
\f[]
.fi
.SH OPTIONS
.TP
.B \f[C]\-w\f[], \f[C]\-\-watch\f[]
If you provide the \f[C]\-\-watch\f[] flag, \f[C]patat\f[] will watch
the presentation file for changes and reload automatically.
This is very useful when you are writing the presentation.
.RS
.RE
.TP
.B \f[C]\-f\f[], \f[C]\-\-force\f[]
Run the presentation even if the terminal claims it does not support
ANSI features.
.RS
.RE
.TP
.B \f[C]\-d\f[], \f[C]\-\-dump\f[]
Just dump all the slides to stdout.
This is useful for debugging.
.RS
.RE
.TP
.B \f[C]\-\-version\f[]
Display version information.
.RS
.RE
.SH SEE ALSO
.PP
pandoc(1)
.SH AUTHORS
Jasper Van der Jeugt.
